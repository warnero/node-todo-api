{
  "name": "mongoose-validator",
  "description": "Validators for mongoose models utilising validator.js",
  "version": "1.0.3",
  "author": {
    "name": "Lee Powell",
    "email": "lee@leepowell.co.uk"
  },
  "contributors": [
    {
      "name": "Francesco Pasqua",
      "url": "https://github.com/cesconix/"
    },
    {
      "name": "Igor Escobar",
      "url": "https://github.com/igorescobar/"
    },
    {
      "name": "Todd Bluhm",
      "url": "https://github.com/toddbluhm/"
    },
    {
      "name": "Subash Pathak",
      "url": "https://github.com/subash/"
    },
    {
      "name": "Kristijan Sedlak",
      "url": "https://github.com/xpepermint"
    }
  ],
  "dependencies": {
    "validator": "^3.18.0"
  },
  "devDependencies": {
    "mongoose": "3.8.x",
    "mocha": "1.20.x",
    "should": "3.3.x"
  },
  "keywords": [
    "mongoose",
    "validate",
    "validation",
    "models",
    "schema"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/leepowellcouk/mongoose-validator.git"
  },
  "main": "./lib/mongoose-validator",
  "scripts": {
    "test": "mocha -R list"
  },
  "engines": {
    "node": "*"
  },
  "readme": "# Mongoose Validator\n\n[![Build Status](https://travis-ci.org/leepowellcouk/mongoose-validator.svg?branch=master)](https://travis-ci.org/leepowellcouk/mongoose-validator)\n\nValidators for [Mongoose](http://mongoosejs.com) schemas utilising [validator.js](https://github.com/chriso/validator.js).\n\nMongoose Validator simply returns Mongoose style validation objects that utilises validator.js for the data validation.\n\nVersion 1.0.x has been refactored to support a simpler interface and also validator.js 3.0.x\n\n**NOTE**: If you were using 0.2.x with your projects please be aware that upgrading to 1.0.x will break them. As of validator.js 3.0.x - many of the avilable validators have been changed. For example, 'regex' validator no longer exists and has been replaced with 'matches'.\n\n## Installation\n\n```bash\n$ npm install mongoose-validator --save\n```\n\n### Legacy install\n\nIf you need to install the 0.2.2 release, use the following command:\n\n```bash\n$ npm install mongoose-validation@0.2.2 --save\n```\n\nMore details on 0.2.2 can be found [here](https://github.com/leepowellcouk/mongoose-validator/blob/0.2.2/README.md)\n\n## Usage\n\n```javascript\nvar mongoose = require('mongoose');\nvar validate = require('mongoose-validator');\n\nvar nameValidator = [\n  validate({\n    validator: 'isLength',\n    arguments: [3, 50],\n    message: 'Name should be between 3 and 50 characters'\n  }),\n  validate({\n    validator: 'isAlphanumeric',\n    passIfEmpty: true,\n    message: 'Name should contain alpha-numeric characters only'\n  })\n];\n\nvar Schema = new mongoose.Schema({\n  name: {type: String, required: true, validate: nameValidator}\n});\n```\n\nError objects are returned as normal via Mongoose.\n\n## Options\n\n### option.validator {string} or {function} - required\nName of the validator or a custom function you wish to use, this can be any one of the [built-in validator.js validators](https://github.com/chriso/validator.js/#validators), or a [custom validator](#custom-validators).\n\n### option.arguments - optional\nArguments to be passed to the validator. These can either be an array of arguments (for validators that can accept more than one i.e. `isLength`), or a single argument as any type.\n\n### option.passIfEmpty {boolean} - optional - default: false\nSome of the validator.js validators require a value to check against (isEmail, isUrl etc). There may be instances where you don't have a value to check i.e. a path that is not required and as such these few validators return an false value causing validation to fail. This can now be bypassed by setting the `passIfEmpty` option.\n\n### option.message - optional\nSet the error message to be used should the validator fail. If no error message is set then mongoose-validator will attempt to use one of the built-in default messages, if it can't then a simple message of 'Error' will be returned.\n\n## Regular Expressions\n\nMongoose Validator can use the validator.js `matches` method, however, it's worth noting that the regex can be passed in 2 ways - as per the validator.js documentation, firstly they can be passed as a literal:\n\n```javascript\nvalidate({\n  validator: 'matches',\n  arguments: /^[a-zA-Z\\-]+$/i\n});\n```\n\nor as a string with a further argument containing any required modifiers:\n\n```javascript\nvalidate({\n  validator: 'matches',\n  arguments: ['^[a-zA-Z\\-]+$', 'i']\n});\n```\n\n## <a name=\"custom-validators\"></a>Custom validators\n\nCustom validators can also be added - these are then added to the validator.js object.\n**NOTE**: Validator.js converts all values to strings internally for built-in validators - however custom validators do *not* do this. This allows you to create custom validators for checking all types such as arrays and objects.\n\n```javascript\n// extend([method name], [validator], [default error message])\n\nvar extend = require('mongoose-validator').extend;\n\nextend('isString', function (val) {\n  return Object.prototype.toString.call(val) === '[object String]';\n}, 'Not a string');\n```\n\nCustom validators are called normally:\n\n```javascript\nvalidate({\n  validator: 'isString'\n});\n```\n\nCustom validator can be passed directly as a function:\n\n```javascript\nvalidate({\n  validator: function(val) {\n    return val > 0;\n  },\n  message: 'Count must be a positive number.'\n})\n```\n\nNOTE: As per validator.js documentation, the currently tested value is accessed through the first argument that is automatically passed to the validator function.\n\n## Contributors\n\nSpecial thanks to [Francesco Pasqua](https://github.com/cesconix/) for heavily refactoring the code into something far more future proof. Thanks also go to [Igor Escobar](https://github.com/igorescobar/) and [Todd Bluhm](https://github.com/toddbluhm/) for their contributions.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/leepowellcouk/mongoose-validator/issues"
  },
  "homepage": "https://github.com/leepowellcouk/mongoose-validator",
  "_id": "mongoose-validator@1.0.3",
  "dist": {
    "shasum": "cca7b117e7dc3a8cf110bf24d8ee1e652813caca"
  },
  "_from": "mongoose-validator@*",
  "_resolved": "https://registry.npmjs.org/mongoose-validator/-/mongoose-validator-1.0.3.tgz"
}
